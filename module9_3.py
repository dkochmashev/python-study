# Установите:
# True, если нужно строго следовать формулировке задачи
# False, если нужно соответствовать ожидаемому выводу
PEDANTIC = False

first = ['Strings', 'Student', 'Computers']
second = ['Строка', 'Урбан', 'Компьютер']

# В переменную first_result запишите генераторную сборку, которая высчитывает
# разницу длин строк из списков first и second, если их длины не равны.
# Для перебора строк попарно из двух списков используйте функцию zip.
first_result = (
    abs(len(first_item) - len(second_item)) \
        for first_item, second_item in zip(first, second) \
            if len(first_item) != len(second_item)
)

# В переменную second_result запишите генераторную сборку, которая содержит
# результаты сравнения строк в одинаковых позициях из списков first и second.
# Составьте эту сборку НЕ используя функцию zip. Используйте функции range и len.
second_result = (
    ### В ТЗ написано "результаты сравнения строк", а не "результаты сравнения длин строк",
    ### но ожидаемый вывод выглядит как результат сравнения ДЛИН строк!
    ###
    ### Далее следует малопонятное примечание:
    ### "Это небольшая практика, поэтому важность выполнения каждого условия обязательна",
    ### в котором слово "важность" явно лишнее. Если его убрать, то получается, что надо
    ### руководствоваться не ожидаемым в задании выводом, а формулировкой задачи.
    ###
    ### В общем, "помиловать нельзя казнить".
    ###
    ### Поэтому, уважаемые проверяющие, пожалуйста настройте нужный ответ сами.
    ### Если нужен "результат сравнения строк", установите PEDANTIC = True
    ### Если нужен "результат сравнения длин строк", установите PEDANTIC = False
    first[item_index] == second[item_index] if PEDANTIC \
        else len(first[item_index]) == len(second[item_index]) \
            for item_index in range(0, len(first))
)

print(list(first_result))
print(list(second_result))
